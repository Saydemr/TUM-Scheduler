"use strict"; const GOOGLE_API = (() => { const e = { CLIENT_ID: "", API_KEY: "", DISCOVERY_DOCS: [""], SCOPES: "" }, t = async t => { try { await gapi.client.init({ apiKey: e.API_KEY, clientId: e.CLIENT_ID, discoveryDocs: e.DISCOVERY_DOCS, scope: e.SCOPES }) } catch (e) { return console.error(e), void alert("Google API failed to initialize.") } for (const e of t) await e() }; return { loadThenInitialize: (...e) => gapi.load("client:auth2", () => t(e)) } })(), CALENDAR_API = (() => { const e = (e, t, a) => { let n = { start: { dateTime: t.startTime.toISOString(), timeZone: "Europe/Istanbul" }, end: { dateTime: t.endTime.toISOString(), timeZone: "Europe/Istanbul" }, location: t.place, reminders: { useDefault: !1 }, summary: t.summary, description: t.course_name, recurrence: [`RRULE:FREQ=WEEKLY;COUNT=${a}`] }; return console.log(n), gapi.client.calendar.events.insert({ calendarId: e, resource: n }) }, t = async () => new Promise((e, t) => { gapi.client.calendar.calendarList.list().execute(function (a) { a.hasOwnProperty("items") ? e(a.items) : t(a) }) }); return { createCalendar: async e => new Promise(function (t, a) { gapi.client.calendar.calendars.insert({ summary: e, colorId: 8 }).execute(function (e) { console.log(e), e.hasOwnProperty("error") ? a("Failed to create the calendar. Here is why:" + e.error.message) : t(e) }) }), addLecturesToCalendar: async (t, a, n) => new Promise(function (r, i) { const s = gapi.client.newBatch(); a.forEach(a => { s.add(e(t, a, n)) }), s.execute(function (e) { console.log(e), e.hasOwnProperty("error") ? i("Failed to add courses. Here is why:\n" + e.error.message) : r() }) }), deleteCalendar: e => new Promise(function (t, a) { gapi.client.calendar.calendars.delete({ calendarId: e }).execute(function (e) { console.log(e), e.hasOwnProperty("error") ? a(`Failed to delete the calendar. Here is why:\n${e.error.message}`) : t() }) }), getUsersCalendarsMatchingSummary: async e => { const a = (await t()).filter(t => t.summary === e); return console.log("Already existing calendars:", a), a.length >= 1 ? a[0] : null } } })(), GOOGLE_CALENDAR_MODAL = (e => { const t = (e => { const t = e.find("#authorize-button"), a = e.find("#signout-button"), n = e.find("#authorized-area"), i = e.find("#unauthorized-area"), s = async e => { if (e) return r("Signed-in successfully."), i.hide(), void n.show(); r("Signed-out successfully."), i.show(), n.hide() }; return { api_initializer: async () => { gapi.auth2.getAuthInstance().isSignedIn.listen(s), await (async e => { if (e) return r("Signed-in successfully."), i.hide(), void n.show(); r("Please sign-in with your Google account."), i.show(), n.hide() })(gapi.auth2.getAuthInstance().isSignedIn.get()), t.click(gapi.auth2.getAuthInstance().signIn), a.click(gapi.auth2.getAuthInstance().signOut) } } })(e), a = (e => { const t = e.find("#current-week"), a = e.find("#add-button"), n = e.find("#delete-button"), i = function () { const e = config.term, t = e.substring(0, 4), a = "01" === e.substring(4) ? "Fall" : "Spring", n = `${t} ${a}`, r = `${n} Courses`; return Object.freeze({ YEAR: t, TYPE: a, NUMERIC: e, VERBAL: n, CALENDAR_SUMMARY: r }) }(), s = function () { const t = e.find("#calendar-add-area"), a = e.find("#current-calendar-name"), n = e.find("#calendar-delete-area"); let r; function i(e) { null === (r = e) ? (t.show(), n.hide()) : (a.text(r.summary), t.hide(), n.show()) } return i(null), { set: i, getId: () => r.id, getSummary: () => r.summary } }(), o = function () { const e = new Date; for (; 1 !== e.getDay();)e.setDate(e.getDate() - 1); e.setHours(0), e.setMinutes(0), e.setSeconds(0); return { mostRecentMonday: e, getStartTime: (t, a) => { const n = new Date(e.getTime()); return n.setDate(n.getDate() + t), n.setHours(8 + a), n.setMinutes(40), n.setSeconds(0), n.setMilliseconds(0), n }, getEndTime: function (e, t) { const a = new Date(e.getTime()); return a.setHours(e.getHours() + t), a.setMinutes(30), a } } }(); a.click(async () => { a.prop("disabled", !0); try { const e = function () { const e = JSON.parse(localStorage.getItem(`course-data-${config.term}-${config.dataVersion}`)), t = (localStorage.getItem("saved-schedule") || "").split(","), a = []; return e.courses.forEach(n => n.classes.forEach(r => r.sections.forEach(i => { t.includes(i.crn) && i.schedule.forEach(t => { const i = o.getStartTime(t.day, t.start), s = o.getEndTime(i, t.duration); a.push({ summary: `${n.code}${r.type}`, course_name: n.name, day: t.day, startTime: i, endTime: s, place: e.places[t.place] }) }) }))), a }(); if (0 === e.length) throw new Error("Please add a course."); r("Creating calendar..."); const a = await CALENDAR_API.createCalendar(i.CALENDAR_SUMMARY); r("Calendar created."), r("Adding courses..."), await CALENDAR_API.addLecturesToCalendar(a.id, e, 14 - parseInt(t.val())), r("Courses added."), s.set(a) } catch (e) { console.error(e), r(e), s.set(null) } a.prop("disabled", !1) }), n.click(async () => { n.prop("disabled", !0); try { await CALENDAR_API.deleteCalendar(s.getId()), r(`"${s.getSummary()}" is deleted.`), s.set(null) } catch (e) { console.error(e), r(e) } n.prop("disabled", !1) }); return { api_initializer: async () => { gapi.auth2.getAuthInstance().isSignedIn.get() && s.set(await CALENDAR_API.getUsersCalendarsMatchingSummary(i.CALENDAR_SUMMARY)), gapi.auth2.getAuthInstance().isSignedIn.listen(async e => { e && s.set(await CALENDAR_API.getUsersCalendarsMatchingSummary(i.CALENDAR_SUMMARY)) }) } } })(e.find("#current-google-calendar")), n = e.find("#notification-area"), r = e => { const t = $(document.createElement("p")), a = (new Date).toTimeString().split(" ")[0]; t.text(`[${a}] ${e}`), n.prepend(t) }; return { api_initializer: async () => { await t.api_initializer(), await a.api_initializer() }, show: () => e.modal({ showClose: !1 }) } })($("#google-calendar-modal")); $("#google-calendar-button").click(GOOGLE_CALENDAR_MODAL.show), GOOGLE_API.loadThenInitialize(GOOGLE_CALENDAR_MODAL.api_initializer);
